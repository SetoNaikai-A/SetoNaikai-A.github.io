<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Markdown的基本使用</title>
    <url>/2021/07/16/Markdown%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="1-Markdown是什么"><a href="#1-Markdown是什么" class="headerlink" title="1.Markdown是什么"></a>1.Markdown是什么</h3><p>Markdown是一种轻量级的标记语言，通过Markdown语法编辑文本，能够使文本呈现清晰的结构</p>
<span id="more"></span>

<h3 id="2-Mark的基本语法"><a href="#2-Mark的基本语法" class="headerlink" title="2.Mark的基本语法"></a>2.Mark的基本语法</h3><h4 id="2-1标题"><a href="#2-1标题" class="headerlink" title="2.1标题"></a>2.1标题</h4><p>Markdown中设置标题需要通过在文本前添加# #号的数量代表标题的等级 #号与文本之间需要间隔空格 Markdown支持1~6级标题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#1级标题</span><br><span class="line">##2级标题</span><br><span class="line">###3级标题</span><br><span class="line">####4级标题</span><br><span class="line">#####5级标题</span><br><span class="line">######6级标题</span><br></pre></td></tr></table></figure>

<p>效果为</p>
<h1 id="1级标题"><a href="#1级标题" class="headerlink" title="1级标题"></a>1级标题</h1><h2 id="2级标题"><a href="#2级标题" class="headerlink" title="2级标题"></a>2级标题</h2><h3 id="3级标题"><a href="#3级标题" class="headerlink" title="3级标题"></a>3级标题</h3><h4 id="4级标题"><a href="#4级标题" class="headerlink" title="4级标题"></a>4级标题</h4><h5 id="5级标题"><a href="#5级标题" class="headerlink" title="5级标题"></a>5级标题</h5><h6 id="6级标题"><a href="#6级标题" class="headerlink" title="6级标题"></a>6级标题</h6><h4 id="2-2字体"><a href="#2-2字体" class="headerlink" title="2.2字体"></a>2.2字体</h4><p>需要加粗的字体前后需要添加**<br><code>*需要加粗的字体* </code><br><strong>需要加粗的字体</strong></p>
<p>需要使用斜体的字体前后需要添加*<br><code>*需要使用斜体的字体</code><br><em>需要使用斜体的字体</em></p>
<p>需要使用删除线的字体前后需要添加~<br><code>~需要使用删除线的字体~</code><br><del>需要使用删除线的字体</del></p>
<p>PS：<br>Markdown中的许多符号都有特殊的含义 要正确地输入这些字符就需要使用转义字符<br>在需要输入的字符前添加\</p>
<h4 id="2-3分割线"><a href="#2-3分割线" class="headerlink" title="2.3分割线"></a>2.3分割线</h4><p>在需要添加分割线处加入***或---</p>
<hr>
<h4 id="2-4代码块"><a href="#2-4代码块" class="headerlink" title="2.4代码块"></a>2.4代码块</h4><p>单行代码前后需要用`包起来<br><code>hexo s -p 5555</code></p>
<p>多行代码前后需要用添加``` 且```应该独占1行<br>在```后加入空格再加入语言名称能够使代码高亮</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03Random</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> num1 = <span class="keyword">new</span> Scanner(System.in).nextInt();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> num2 = r.nextInt(num1)+<span class="number">1</span>;</span><br><span class="line">            System.out.println(num2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-5引用"><a href="#2-5引用" class="headerlink" title="2.5引用"></a>2.5引用</h4><p>在需要引用的文本前加&gt; &gt;的数量代表引用的级别<br><code>&gt;需要引用的文本</code></p>
<blockquote>
<p>需要引用的文本</p>
</blockquote>
<h4 id="2-6图片"><a href="#2-6图片" class="headerlink" title="2.6图片"></a>2.6图片</h4><p>Markdown中插入图片需要按照特定的格式<br>![alt text 属性文本](图片地址”optional title 可选标题”)</p>
<p>alt text 属性文本<br>为描述图片的关键词 当图片无法显示将会显示alt属性文本</p>
<p>optional title 可选标题<br>当鼠标悬停在图片上时将会显示optional title</p>
<p><code>![Pic1.jpg](https://i.loli.net/2021/07/19/AEqZtxHhXDLlKVR.jpg)</code></p>
<p><img src="https://i.loli.net/2021/07/19/AEqZtxHhXDLlKVR.jpg" alt="Pic1.jpg" title="作品ID:67125950 水面向こう 画师ID:986537 幻想絵風"></p>
<p>Markdown中插入的图片的地址可以是本地路径或服务器的网络地址<br>博客中的图片往往会存放在一种专门存储图片的服务器中 即图床<br>有关于图床推荐与使用方法：</p>
<h4 id="2-7链接"><a href="#2-7链接" class="headerlink" title="2.7链接"></a>2.7链接</h4><p>Markdown中插入链接的格式与插入图片的格式十分相似<br>[alt text 属性文本](链接地址 “optional title 可选标题”)</p>
<p>其中链接分为行内式链接 参考式链接 自动链接</p>
<p>行内式链接<br><code>[Biliibili](https://www.bilibili.com/)</code><br><a href="https://www.bilibili.com/">Biliibili</a></p>
<p>参考式链接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Bilibili][url]</span><br><span class="line"></span><br><span class="line">[url]: https://www.bilibili.com/</span><br></pre></td></tr></table></figure>
<p><a href="https://www.bilibili.com/">Bilibili</a></p>
<p>自动链接<br><code>&lt;https://www.bilibili.com/&gt;</code><br><a href="https://www.bilibili.com/">https://www.bilibili.com/</a></p>
<h4 id="2-8列表"><a href="#2-8列表" class="headerlink" title="2.8列表"></a>2.8列表</h4><p>Markdown中存在有序列表与无序列表2种列表</p>
<p>有序列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 列表内容</span><br><span class="line">2. 列表内容</span><br><span class="line">3. 列表内容</span><br></pre></td></tr></table></figure>
<ol>
<li>列表内容</li>
<li>列表内容</li>
<li>列表内容</li>
</ol>
<p>无序列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">- 列表内容</span><br><span class="line">- 列表内容</span><br></pre></td></tr></table></figure>
<ul>
<li>列表内容</li>
<li>列表内容</li>
<li>列表内容</li>
</ul>
<h4 id="2-9-表格"><a href="#2-9-表格" class="headerlink" title="2.9 表格"></a>2.9 表格</h4><p>Markdown中插入图片需要按照特定的格式<br>Markdown中插入的表格的内容可以控制其左右对齐<br>右对齐 :-<br>居中 :-:<br>右对齐 -:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">表格内容|表格内容|表格内容|</span><br><span class="line">:-:|:-:|:-:|</span><br><span class="line">表格内容|表格内容|表格内容|</span><br><span class="line">表格内容|表格内容|表格内容|</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">表格内容</th>
<th align="center">表格内容</th>
<th align="center">表格内容</th>
</tr>
</thead>
<tbody><tr>
<td align="center">表格内容</td>
<td align="center">表格内容</td>
<td align="center">表格内容</td>
</tr>
<tr>
<td align="center">表格内容</td>
<td align="center">表格内容</td>
<td align="center">表格内容</td>
</tr>
</tbody></table>
<h3 id="3-其他"><a href="#3-其他" class="headerlink" title="3.其他"></a>3.其他</h3><p>Markdown作为一种轻量级的标记语言 注重其简单易用的特性<br>Markdown无法实现的功能可以通过HTML5进行弥补<br>网络上Markdown的教程非常多 本文介绍的是较为常用的基本使用方法<br>此次为本人第1次写教程类型的文章 如有阐述不清的地方还请多谅解<br>感谢阅读 ๑╹◡╹)ﾉ”</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/07/14/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start-Hello-Hexo"><a href="#Quick-Start-Hello-Hexo" class="headerlink" title="Quick Start Hello Hexo"></a>Quick Start Hello Hexo</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>集合Collection 与 泛型GenericClass</title>
    <url>/2021/09/29/Java-Day9-29-Collection-GenericClass/</url>
    <content><![CDATA[<h3 id="1-集合是什么"><a href="#1-集合是什么" class="headerlink" title="1.集合是什么"></a>1.集合是什么</h3><p>集合：Java中提供的一种容器 可以用来存放多个数据</p>
<span id="more"></span>

<p>那么Java中的集合和数组有什么区别呢</p>
<blockquote>
<p>1.数组能存放基本数据类型和对象，而集合类存放的都是对象，集合类不能存放基本数据类型,要使用包装类 (数组和集合存放的对象皆为对象的引用地址)</p>
</blockquote>
<blockquote>
<p>2.数组容易固定无法动态改变，集合类容量动态改变</p>
</blockquote>
<blockquote>
<p>3.数组无法判断其中实际存有多少元素，length只告诉了数组的容量，而集合的size()可以确切知道元素的个数</p>
</blockquote>
<blockquote>
<p>4.集合有多种实现方式和不同适用场合，不像数组仅采用顺序表方式</p>
</blockquote>
<blockquote>
<p>5.集合以类的形式存在，具有封装、继承、多态等类的特性，通过简单的方法和属性即可实现各种复杂操作，大大提高了软件的开发效率</p>
</blockquote>
<h3 id="2-Java中的集合框架"><a href="#2-Java中的集合框架" class="headerlink" title="2.Java中的集合框架"></a>2.Java中的集合框架</h3><p>集合按照其存储结构主要可以分为两大类，单列集合java.until.Collection 与 双列集合java.util.Map</p>
<p>集合类 Collextion 接口</p>
<p><em>Collection –&gt; List –&gt; ArrayList / LinkedList / Vector</em> </p>
<p>List接口特点：元素有序可重复</p>
<p><em>Collection –&gt; Set –&gt; (HashSet–&gt;LinkedHashSet) / TreeSet</em></p>
<p>Set接口特点：元素无序不可重复</p>
<p>List</p>
<blockquote>
<p>ArrayList<br>优点: 底层数据结构是数组，查询快，增删慢<br>缺点: 线程不安全，效率高</p>
</blockquote>
<blockquote>
<p>Vector<br>优点: 底层数据结构是数组，查询快，增删慢<br>缺点: 线程安全，效率低</p>
</blockquote>
<blockquote>
<p>LinkedList<br>优点: 底层数据结构是链表，查询慢，增删快<br>缺点: 线程不安全，效率高</p>
</blockquote>
<p>Set</p>
<blockquote>
<p>HashSet<br>底层数据结构:哈希表<br>元素唯一：hashCode() equals()</p>
</blockquote>
<blockquote>
<p>LinkedHashSet<br>底层数据结构：链表+哈希表<br>元素有序：链表<br>元素唯一：哈希表</p>
</blockquote>
<blockquote>
<p>TreeSet<br>底层数据结构：红黑树<br>元素有序：自然排序+比较器排序<br>元素唯一：比较返回值是否等于0</p>
</blockquote>
<h3 id="3-Collection-常用方法"><a href="#3-Collection-常用方法" class="headerlink" title="3.Collection 常用方法"></a>3.Collection 常用方法</h3><p>Collection 接口是所有单列集合的父接口，因此Collction中定义的所有的方法，能够用于操作所有单列集合</p>
<blockquote>
<p>public boolean add(E e)</p>
</blockquote>
<blockquote>
<p>public void clear()</p>
</blockquote>
<blockquote>
<p>public boolean remove(E e)</p>
</blockquote>
<blockquote>
<p>public boolean contains(E e)</p>
</blockquote>
<blockquote>
<p>public boolean isEmpty()</p>
</blockquote>
<blockquote>
<p>public int size()</p>
</blockquote>
<blockquote>
<p>public Object[] toArray()</p>
</blockquote>
<h3 id="4-如何遍历集合-Iterator迭代器-增强for"><a href="#4-如何遍历集合-Iterator迭代器-增强for" class="headerlink" title="4.如何遍历集合 Iterator迭代器/增强for"></a>4.如何遍历集合 Iterator迭代器/增强for</h3><p>JDK中提供了一个用于迭代访问Collection中元素的接口 Java.util.Iterator</p>
<p>Iterator对象被称为迭代器</p>
<p>创建Iterator对象 不是使用new语句 而是调用 集合对象名.iterator 方法</p>
<blockquote>
<p>public Iterator iterator()</p>
</blockquote>
<p>Iterator 常用方法</p>
<blockquote>
<p>public E next()</p>
</blockquote>
<blockquote>
<p>public boolean hasNext()</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Collection&lt;String&gt; coll = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        coll.add(<span class="string">&quot;HavelA&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;HavelB&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;HavelC&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Iterator&lt;String&gt; it = coll.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            System.out.println(it.next());<span class="comment">//HavelA HavelB HavelC</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>增强for 即for each循环</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Collection&lt;String&gt; coll = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        coll.add(<span class="string">&quot;HavelA&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;HavelB&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;HavelC&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String str : coll) &#123;</span><br><span class="line">            System.out.println(str);<span class="comment">//HavelA HavelB HavelC</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-泛型"><a href="#5-泛型" class="headerlink" title="5.泛型"></a>5.泛型</h3><p>泛型是一种参数化的数据类型 能够使用在类 方法 接口的定义中</p>
<p>使用泛型的类</p>
<blockquote>
<p>修饰符 class 类名&lt;代表泛型的变量&gt;{}</p>
</blockquote>
<p><em>在创建对象的时候 确定泛型 否则则默认为Object类型</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure>

<p>使用泛型的方法</p>
<blockquote>
<p>修饰符 &lt;代表泛型的变量&gt; 返回值类型 方法名(参数类型 参数){}</p>
</blockquote>
<p><em>在调用方法的时候 确定泛型</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassA</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> &lt;element&gt; <span class="function">element <span class="title">method</span><span class="params">(element e)</span></span>&#123;</span><br><span class="line">		System.out.println(e.getClass());</span><br><span class="line">		<span class="keyword">return</span> e;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ClassA A = <span class="keyword">new</span> ClassA();</span><br><span class="line">		A.method(<span class="number">100</span>);<span class="comment">//传入的即是自动装箱为Integer类型的对象</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用泛型的接口</p>
<blockquote>
<p>修饰符 interface 接口名&lt;代表泛型的变量&gt;{}</p>
</blockquote>
<p><em>定义类的时候或者创建对象的时候 确定泛型</em></p>
<h3 id="6-泛型通配符"><a href="#6-泛型通配符" class="headerlink" title="6.泛型通配符"></a>6.泛型通配符</h3><p>当不知道使用什么类型来接收的时候 可以使用? 表示未知通配符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Collection&lt;Intger&gt; list1 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    getElement(list1);</span><br><span class="line">    Collection&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    getElement(list2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getElement</span><span class="params">(Collection&lt;?&gt; coll)</span></span>&#123;&#125;<span class="comment">//？代表可以接收任意类型</span></span><br></pre></td></tr></table></figure>

<p><strong>通配符高级使用—-受限泛型</strong></p>
<p>之前设置泛型的时候，实际上是可以任意设置的，只要是类就可以设置。但是在JAVA的泛型中可以指定一个泛型的上限和下限</p>
<p>泛型的上限</p>
<blockquote>
<p>类型名称 &lt;? extends 类 &gt; 对象名称</p>
</blockquote>
<blockquote>
<p>只能接收该类型及其子类</p>
</blockquote>
<p>泛型的下限</p>
<p>格式</p>
<blockquote>
<p>类型名称 &lt;? super 类 &gt; 对象名称</p>
</blockquote>
<p>意义</p>
<blockquote>
<p>只能接收该类型及其父类型</p>
</blockquote>
<p>关于Java中的Collection与GenericClass<br>目前总结的就以上这么多<br>感谢阅读 ๑╹◡╹)ﾉ”</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建Hexo博客</title>
    <url>/2021/07/16/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h3 id="1-Hexo是什么"><a href="#1-Hexo是什么" class="headerlink" title="1.Hexo是什么"></a>1.Hexo是什么</h3><p>Hexo 是一款快速、简洁、高效的博客框架</p>
<span id="more"></span>

<p>博客 即网络日志 是由个人管理，不定期更新文章的个人网站<br>框架 则是封装了能够实现基础功能代码的代码库</p>
<p><strong>关于Hexo博客</strong></p>
<p>Hexo 是一种静态博客框架，构建的博客实际上都是静态网页，不同于使用WordPress搭建的动态博客，其不需要依托于服务器<br>但是需要依托于一些支持静态博客框架的服务，例如 Github Pages</p>
<p>除了Hexo博客框架之外，还有其他的博客框架，想要了解详细的内容可以参考这篇文章<br><a href="https://blog.csdn.net/weixin_42365530/article/details/107840934">七大开源blog框架介绍</a></p>
<h3 id="2-Hexo框架下载与主题选择"><a href="#2-Hexo框架下载与主题选择" class="headerlink" title="2.Hexo框架下载与主题选择"></a>2.Hexo框架下载与主题选择</h3><p>首先在搭建Hexo博客之前可以在官网下载相应的文件 其次可以在官网的Themes中选择想要使用主题<br><a href="https://hexo.io/">Hexo官网</a></p>
<p>Next主题为使用人数较多的Hexo主题 关于主题优化改造的教程相应也会较多<br>对于初次接触Hexo博客的站主来说 Next自然是比较好的选择<br><a href="http://theme-next.iissnan.com/">Next官网</a></p>
<h3 id="3-Hexo博客搭建教程"><a href="#3-Hexo博客搭建教程" class="headerlink" title="3.Hexo博客搭建教程"></a>3.Hexo博客搭建教程</h3><p>做好这些准备工作之后按照视频教程的步骤一步步来就好了<br><a href="https://www.bilibili.com/video/BV1cW411A7Jx?from=search&seid=5567084142555335097&spm_id_from=333.337.0.0">手把手教你搭建属于自己的hexo+github博客</a></p>
<p>注意:因为在2020年10月1日起，GitHub默认主分支从 master 更名为 main<br>所以该视频中的提交方式会默认创建一个master分支，为保持一致性，可将本地git init的时候默认分支修改为main<br>执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git --version  查看版本</span><br><span class="line">git config --global init.defaultBranch main       git分支在2.28.0上，重新设置默认分支为main</span><br></pre></td></tr></table></figure>

<p>最后修改deploy那里的branch：将master改为main</p>
<p>此方法用于解决本地搭好了主题，在GitHub上却没有变化的问题</p>
<h3 id="4-Hexo博客Next主题优化改造"><a href="#4-Hexo博客Next主题优化改造" class="headerlink" title="4.Hexo博客Next主题优化改造"></a>4.Hexo博客Next主题优化改造</h3><p>Next主题的优化以及添加一些例如评论区的功能可以根据以下视频进行操作<br><a href="https://www.bilibili.com/video/BV16W411t7mq?from=search&seid=9305684963897241411&spm_id_from=333.337.0.0">使用Hexo博客搭建的个人博客，使用Next主题来进行优化改造</a></p>
<p>注意:视频中的 language: zh-Hans 需要更改为 language: zh-CN</p>
<p>Next主题如何添加背景图片<br><a href="https://blog.csdn.net/weixin_46106283/article/details/109880961">Next主题添加背景图片</a></p>
<h3 id="5-Hexo博客添加自己的域名"><a href="#5-Hexo博客添加自己的域名" class="headerlink" title="5.Hexo博客添加自己的域名"></a>5.Hexo博客添加自己的域名</h3><p>如果还没有购买过服务器或域名可以根据以下视频进行操作<br><a href="https://www.bilibili.com/video/BV147411M7C7?from=search&seid=9638524931376618382&spm_id_from=333.337.0.0">详细搭建过程演示 | Hugo+GitHub Pages,无需域名+云服务器</a></p>
<p>购买到域名并且审核通过后如何让添加域名<br><a href="https://blog.csdn.net/miss_bear/article/details/106164293">hexo博客设置域名</a></p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>关于Hexo博客的搭建与使用本人接触的时间也不长 如有阐述不清的地方还请多谅解<br>此文后续还会不断更新<br>感谢阅读 ๑╹◡╹)ﾉ”</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
</search>
